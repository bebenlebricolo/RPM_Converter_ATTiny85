
RPM_converter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b7e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000bf2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800060  00800060  00000bf2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bf2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001467  00000000  00000000  00000da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007df  00000000  00000000  0000220f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b2c  00000000  00000000  000029ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007b0  00000000  00000000  0000351c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008c6  00000000  00000000  00003ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001175  00000000  00000000  00004592  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00005707  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0f c0       	rjmp	.+30     	; 0x20 <__ctors_end>
   2:	c1 c1       	rjmp	.+898    	; 0x386 <__vector_1>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	f1 c2       	rjmp	.+1506   	; 0x5ea <__vector_3>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	52 c3       	rjmp	.+1700   	; 0x6b8 <__vector_9>
  14:	a8 c2       	rjmp	.+1360   	; 0x566 <__vector_10>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>

0000001e <__ctors_start>:
  1e:	04 04       	cpc	r0, r4

00000020 <__ctors_end>:
  20:	11 24       	eor	r1, r1
  22:	1f be       	out	0x3f, r1	; 63
  24:	cf e5       	ldi	r28, 0x5F	; 95
  26:	d2 e0       	ldi	r29, 0x02	; 2
  28:	de bf       	out	0x3e, r29	; 62
  2a:	cd bf       	out	0x3d, r28	; 61

0000002c <__do_copy_data>:
  2c:	10 e0       	ldi	r17, 0x00	; 0
  2e:	a0 e6       	ldi	r26, 0x60	; 96
  30:	b0 e0       	ldi	r27, 0x00	; 0
  32:	ee e7       	ldi	r30, 0x7E	; 126
  34:	fb e0       	ldi	r31, 0x0B	; 11
  36:	02 c0       	rjmp	.+4      	; 0x3c <__do_copy_data+0x10>
  38:	05 90       	lpm	r0, Z+
  3a:	0d 92       	st	X+, r0
  3c:	a0 36       	cpi	r26, 0x60	; 96
  3e:	b1 07       	cpc	r27, r17
  40:	d9 f7       	brne	.-10     	; 0x38 <__do_copy_data+0xc>

00000042 <__do_clear_bss>:
  42:	20 e0       	ldi	r18, 0x00	; 0
  44:	a0 e6       	ldi	r26, 0x60	; 96
  46:	b0 e0       	ldi	r27, 0x00	; 0
  48:	01 c0       	rjmp	.+2      	; 0x4c <.do_clear_bss_start>

0000004a <.do_clear_bss_loop>:
  4a:	1d 92       	st	X+, r1

0000004c <.do_clear_bss_start>:
  4c:	a4 37       	cpi	r26, 0x74	; 116
  4e:	b2 07       	cpc	r27, r18
  50:	e1 f7       	brne	.-8      	; 0x4a <.do_clear_bss_loop>

00000052 <__do_global_ctors>:
  52:	10 e0       	ldi	r17, 0x00	; 0
  54:	c0 e1       	ldi	r28, 0x10	; 16
  56:	d0 e0       	ldi	r29, 0x00	; 0
  58:	03 c0       	rjmp	.+6      	; 0x60 <__do_global_ctors+0xe>
  5a:	21 97       	sbiw	r28, 0x01	; 1
  5c:	fe 01       	movw	r30, r28
  5e:	87 d5       	rcall	.+2830   	; 0xb6e <__tablejump2__>
  60:	cf 30       	cpi	r28, 0x0F	; 15
  62:	d1 07       	cpc	r29, r17
  64:	d1 f7       	brne	.-12     	; 0x5a <__do_global_ctors+0x8>
  66:	81 d3       	rcall	.+1794   	; 0x76a <main>
  68:	88 c5       	rjmp	.+2832   	; 0xb7a <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <_Z10init_arrayv>:
volatile uint8_t old_input_state = 0;
volatile uint8_t freeze_input = 0;

// Initialize the s_avg_array
void init_array(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	1f 92       	push	r1
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
  uint8_t i = 0;
  76:	19 82       	std	Y+1, r1	; 0x01
  for(i=0 ; i< MAX_SAVG ; i++ )
  78:	19 82       	std	Y+1, r1	; 0x01
  7a:	89 81       	ldd	r24, Y+1	; 0x01
  7c:	88 23       	and	r24, r24
  7e:	91 f4       	brne	.+36     	; 0xa4 <_Z10init_arrayv+0x38>
  {
  s_avg_array[i] = 0;
  80:	89 81       	ldd	r24, Y+1	; 0x01
  82:	88 2f       	mov	r24, r24
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	88 0f       	add	r24, r24
  88:	99 1f       	adc	r25, r25
  8a:	88 0f       	add	r24, r24
  8c:	99 1f       	adc	r25, r25
  8e:	8e 59       	subi	r24, 0x9E	; 158
  90:	9f 4f       	sbci	r25, 0xFF	; 255
  92:	fc 01       	movw	r30, r24
  94:	10 82       	st	Z, r1
  96:	11 82       	std	Z+1, r1	; 0x01
  98:	12 82       	std	Z+2, r1	; 0x02
  9a:	13 82       	std	Z+3, r1	; 0x03

// Initialize the s_avg_array
void init_array(void)
{
  uint8_t i = 0;
  for(i=0 ; i< MAX_SAVG ; i++ )
  9c:	89 81       	ldd	r24, Y+1	; 0x01
  9e:	8f 5f       	subi	r24, 0xFF	; 255
  a0:	89 83       	std	Y+1, r24	; 0x01
  a2:	eb cf       	rjmp	.-42     	; 0x7a <_Z10init_arrayv+0xe>
  {
  s_avg_array[i] = 0;
  }
}
  a4:	00 00       	nop
  a6:	0f 90       	pop	r0
  a8:	df 91       	pop	r29
  aa:	cf 91       	pop	r28
  ac:	08 95       	ret

000000ae <_Z11push_periodh>:

// Pushes the new period value inside the array
void push_period(uint8_t new_period)
{
  ae:	ef 92       	push	r14
  b0:	ff 92       	push	r15
  b2:	0f 93       	push	r16
  b4:	1f 93       	push	r17
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	1f 92       	push	r1
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	89 83       	std	Y+1, r24	; 0x01
  cur_period_index++;
  c2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_end>
  c6:	8f 5f       	subi	r24, 0xFF	; 255
  c8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_end>
  cur_period_index %= MAX_SAVG;
  cc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_end>
  d0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_end>

  sum_period += new_period - s_avg_array[cur_period_index];
  d4:	89 81       	ldd	r24, Y+1	; 0x01
  d6:	28 2f       	mov	r18, r24
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	40 e0       	ldi	r20, 0x00	; 0
  dc:	50 e0       	ldi	r21, 0x00	; 0
  de:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_end>
  e2:	88 2f       	mov	r24, r24
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	8e 59       	subi	r24, 0x9E	; 158
  f0:	9f 4f       	sbci	r25, 0xFF	; 255
  f2:	fc 01       	movw	r30, r24
  f4:	80 81       	ld	r24, Z
  f6:	91 81       	ldd	r25, Z+1	; 0x01
  f8:	a2 81       	ldd	r26, Z+2	; 0x02
  fa:	b3 81       	ldd	r27, Z+3	; 0x03
  fc:	79 01       	movw	r14, r18
  fe:	8a 01       	movw	r16, r20
 100:	e8 1a       	sub	r14, r24
 102:	f9 0a       	sbc	r15, r25
 104:	0a 0b       	sbc	r16, r26
 106:	1b 0b       	sbc	r17, r27
 108:	d8 01       	movw	r26, r16
 10a:	c7 01       	movw	r24, r14
 10c:	98 2f       	mov	r25, r24
 10e:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <sum_period>
 112:	89 0f       	add	r24, r25
 114:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <sum_period>
  avg_period = sum_period / MAX_SAVG;
 118:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <sum_period>
 11c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <avg_period>
  s_avg_array[cur_period_index] = new_period;
 120:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_end>
 124:	28 2f       	mov	r18, r24
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	89 81       	ldd	r24, Y+1	; 0x01
 12a:	88 2f       	mov	r24, r24
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	a0 e0       	ldi	r26, 0x00	; 0
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	22 0f       	add	r18, r18
 134:	33 1f       	adc	r19, r19
 136:	22 0f       	add	r18, r18
 138:	33 1f       	adc	r19, r19
 13a:	2e 59       	subi	r18, 0x9E	; 158
 13c:	3f 4f       	sbci	r19, 0xFF	; 255
 13e:	f9 01       	movw	r30, r18
 140:	80 83       	st	Z, r24
 142:	91 83       	std	Z+1, r25	; 0x01
 144:	a2 83       	std	Z+2, r26	; 0x02
 146:	b3 83       	std	Z+3, r27	; 0x03
}
 148:	00 00       	nop
 14a:	0f 90       	pop	r0
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	1f 91       	pop	r17
 152:	0f 91       	pop	r16
 154:	ff 90       	pop	r15
 156:	ef 90       	pop	r14
 158:	08 95       	ret

0000015a <_Z14clamp_in_rangejjj>:

// Clamps a variable into a given range (unsorted)
uint16_t clamp_in_range(uint16_t var , uint16_t range_1 , uint16_t range_2)
{
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	cd b7       	in	r28, 0x3d	; 61
 160:	de b7       	in	r29, 0x3e	; 62
 162:	2a 97       	sbiw	r28, 0x0a	; 10
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	f8 94       	cli
 168:	de bf       	out	0x3e, r29	; 62
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	cd bf       	out	0x3d, r28	; 61
 16e:	9e 83       	std	Y+6, r25	; 0x06
 170:	8d 83       	std	Y+5, r24	; 0x05
 172:	78 87       	std	Y+8, r23	; 0x08
 174:	6f 83       	std	Y+7, r22	; 0x07
 176:	5a 87       	std	Y+10, r21	; 0x0a
 178:	49 87       	std	Y+9, r20	; 0x09
	uint16_t upper_bound = 0;
 17a:	1a 82       	std	Y+2, r1	; 0x02
 17c:	19 82       	std	Y+1, r1	; 0x01
	uint16_t lower_bound = 0;
 17e:	1c 82       	std	Y+4, r1	; 0x04
 180:	1b 82       	std	Y+3, r1	; 0x03
	
	// Find lower and upper bounds of incoming range
	if(range_1 > range_2) 
 182:	2f 81       	ldd	r18, Y+7	; 0x07
 184:	38 85       	ldd	r19, Y+8	; 0x08
 186:	89 85       	ldd	r24, Y+9	; 0x09
 188:	9a 85       	ldd	r25, Y+10	; 0x0a
 18a:	82 17       	cp	r24, r18
 18c:	93 07       	cpc	r25, r19
 18e:	48 f4       	brcc	.+18     	; 0x1a2 <_Z14clamp_in_rangejjj+0x48>
	{
		upper_bound = range_1;
 190:	8f 81       	ldd	r24, Y+7	; 0x07
 192:	98 85       	ldd	r25, Y+8	; 0x08
 194:	9a 83       	std	Y+2, r25	; 0x02
 196:	89 83       	std	Y+1, r24	; 0x01
		lower_bound = range_2;
 198:	89 85       	ldd	r24, Y+9	; 0x09
 19a:	9a 85       	ldd	r25, Y+10	; 0x0a
 19c:	9c 83       	std	Y+4, r25	; 0x04
 19e:	8b 83       	std	Y+3, r24	; 0x03
 1a0:	08 c0       	rjmp	.+16     	; 0x1b2 <_Z14clamp_in_rangejjj+0x58>
	}
	else 
	{
		upper_bound = range_2;
 1a2:	89 85       	ldd	r24, Y+9	; 0x09
 1a4:	9a 85       	ldd	r25, Y+10	; 0x0a
 1a6:	9a 83       	std	Y+2, r25	; 0x02
 1a8:	89 83       	std	Y+1, r24	; 0x01
		lower_bound = range_1;
 1aa:	8f 81       	ldd	r24, Y+7	; 0x07
 1ac:	98 85       	ldd	r25, Y+8	; 0x08
 1ae:	9c 83       	std	Y+4, r25	; 0x04
 1b0:	8b 83       	std	Y+3, r24	; 0x03
	}
	
	// Clamp input variable into the range
	if(var > upper_bound)
 1b2:	2d 81       	ldd	r18, Y+5	; 0x05
 1b4:	3e 81       	ldd	r19, Y+6	; 0x06
 1b6:	89 81       	ldd	r24, Y+1	; 0x01
 1b8:	9a 81       	ldd	r25, Y+2	; 0x02
 1ba:	82 17       	cp	r24, r18
 1bc:	93 07       	cpc	r25, r19
 1be:	28 f4       	brcc	.+10     	; 0x1ca <_Z14clamp_in_rangejjj+0x70>
	{
		var = upper_bound;
 1c0:	89 81       	ldd	r24, Y+1	; 0x01
 1c2:	9a 81       	ldd	r25, Y+2	; 0x02
 1c4:	9e 83       	std	Y+6, r25	; 0x06
 1c6:	8d 83       	std	Y+5, r24	; 0x05
 1c8:	0b c0       	rjmp	.+22     	; 0x1e0 <_Z14clamp_in_rangejjj+0x86>
	}
	else if(var < lower_bound)
 1ca:	2d 81       	ldd	r18, Y+5	; 0x05
 1cc:	3e 81       	ldd	r19, Y+6	; 0x06
 1ce:	8b 81       	ldd	r24, Y+3	; 0x03
 1d0:	9c 81       	ldd	r25, Y+4	; 0x04
 1d2:	28 17       	cp	r18, r24
 1d4:	39 07       	cpc	r19, r25
 1d6:	20 f4       	brcc	.+8      	; 0x1e0 <_Z14clamp_in_rangejjj+0x86>
	{
		var = lower_bound;
 1d8:	8b 81       	ldd	r24, Y+3	; 0x03
 1da:	9c 81       	ldd	r25, Y+4	; 0x04
 1dc:	9e 83       	std	Y+6, r25	; 0x06
 1de:	8d 83       	std	Y+5, r24	; 0x05
	}
	
	return var;
 1e0:	8d 81       	ldd	r24, Y+5	; 0x05
 1e2:	9e 81       	ldd	r25, Y+6	; 0x06
}
 1e4:	2a 96       	adiw	r28, 0x0a	; 10
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	f8 94       	cli
 1ea:	de bf       	out	0x3e, r29	; 62
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	cd bf       	out	0x3d, r28	; 61
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	08 95       	ret

000001f6 <_Z8interpoljjjjj>:
// Only works with positive ranges (unsigned variables)
// maximum uint16_t input values : 0 - 65535

// TODO : Having float conversion for this kind of calculation is SUPER heavy. Change for integer-only calculation.
uint16_t interpol(uint16_t X, uint16_t start_in, uint16_t end_in,uint16_t start_out, uint16_t end_out)
{
 1f6:	0f 93       	push	r16
 1f8:	1f 93       	push	r17
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	cd b7       	in	r28, 0x3d	; 61
 200:	de b7       	in	r29, 0x3e	; 62
 202:	62 97       	sbiw	r28, 0x12	; 18
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	f8 94       	cli
 208:	de bf       	out	0x3e, r29	; 62
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	cd bf       	out	0x3d, r28	; 61
 20e:	9a 87       	std	Y+10, r25	; 0x0a
 210:	89 87       	std	Y+9, r24	; 0x09
 212:	7c 87       	std	Y+12, r23	; 0x0c
 214:	6b 87       	std	Y+11, r22	; 0x0b
 216:	5e 87       	std	Y+14, r21	; 0x0e
 218:	4d 87       	std	Y+13, r20	; 0x0d
 21a:	38 8b       	std	Y+16, r19	; 0x10
 21c:	2f 87       	std	Y+15, r18	; 0x0f
 21e:	1a 8b       	std	Y+18, r17	; 0x12
 220:	09 8b       	std	Y+17, r16	; 0x11
  uint16_t mapped_value = 0;
 222:	1a 82       	std	Y+2, r1	; 0x02
 224:	19 82       	std	Y+1, r1	; 0x01
  uint16_t delta_inrange = 0;
 226:	1c 82       	std	Y+4, r1	; 0x04
 228:	1b 82       	std	Y+3, r1	; 0x03
  uint16_t delta_outrange = 0;
 22a:	1e 82       	std	Y+6, r1	; 0x06
 22c:	1d 82       	std	Y+5, r1	; 0x05
  uint16_t magnitude_order = 0;
 22e:	18 86       	std	Y+8, r1	; 0x08
 230:	1f 82       	std	Y+7, r1	; 0x07
  if(start_in > end_in) delta_inrange = start_in - end_in;
 232:	2b 85       	ldd	r18, Y+11	; 0x0b
 234:	3c 85       	ldd	r19, Y+12	; 0x0c
 236:	8d 85       	ldd	r24, Y+13	; 0x0d
 238:	9e 85       	ldd	r25, Y+14	; 0x0e
 23a:	82 17       	cp	r24, r18
 23c:	93 07       	cpc	r25, r19
 23e:	58 f4       	brcc	.+22     	; 0x256 <_Z8interpoljjjjj+0x60>
 240:	2b 85       	ldd	r18, Y+11	; 0x0b
 242:	3c 85       	ldd	r19, Y+12	; 0x0c
 244:	8d 85       	ldd	r24, Y+13	; 0x0d
 246:	9e 85       	ldd	r25, Y+14	; 0x0e
 248:	a9 01       	movw	r20, r18
 24a:	48 1b       	sub	r20, r24
 24c:	59 0b       	sbc	r21, r25
 24e:	ca 01       	movw	r24, r20
 250:	9c 83       	std	Y+4, r25	; 0x04
 252:	8b 83       	std	Y+3, r24	; 0x03
 254:	0a c0       	rjmp	.+20     	; 0x26a <__stack+0xb>
  else delta_inrange = end_in - start_in;
 256:	2d 85       	ldd	r18, Y+13	; 0x0d
 258:	3e 85       	ldd	r19, Y+14	; 0x0e
 25a:	8b 85       	ldd	r24, Y+11	; 0x0b
 25c:	9c 85       	ldd	r25, Y+12	; 0x0c
 25e:	a9 01       	movw	r20, r18
 260:	48 1b       	sub	r20, r24
 262:	59 0b       	sbc	r21, r25
 264:	ca 01       	movw	r24, r20
 266:	9c 83       	std	Y+4, r25	; 0x04
 268:	8b 83       	std	Y+3, r24	; 0x03

  if(start_out > end_out) delta_outrange = start_out - end_out;
 26a:	2f 85       	ldd	r18, Y+15	; 0x0f
 26c:	38 89       	ldd	r19, Y+16	; 0x10
 26e:	89 89       	ldd	r24, Y+17	; 0x11
 270:	9a 89       	ldd	r25, Y+18	; 0x12
 272:	82 17       	cp	r24, r18
 274:	93 07       	cpc	r25, r19
 276:	58 f4       	brcc	.+22     	; 0x28e <__stack+0x2f>
 278:	2f 85       	ldd	r18, Y+15	; 0x0f
 27a:	38 89       	ldd	r19, Y+16	; 0x10
 27c:	89 89       	ldd	r24, Y+17	; 0x11
 27e:	9a 89       	ldd	r25, Y+18	; 0x12
 280:	a9 01       	movw	r20, r18
 282:	48 1b       	sub	r20, r24
 284:	59 0b       	sbc	r21, r25
 286:	ca 01       	movw	r24, r20
 288:	9e 83       	std	Y+6, r25	; 0x06
 28a:	8d 83       	std	Y+5, r24	; 0x05
 28c:	0a c0       	rjmp	.+20     	; 0x2a2 <__stack+0x43>
  else delta_outrange = end_out - start_out; 
 28e:	29 89       	ldd	r18, Y+17	; 0x11
 290:	3a 89       	ldd	r19, Y+18	; 0x12
 292:	8f 85       	ldd	r24, Y+15	; 0x0f
 294:	98 89       	ldd	r25, Y+16	; 0x10
 296:	a9 01       	movw	r20, r18
 298:	48 1b       	sub	r20, r24
 29a:	59 0b       	sbc	r21, r25
 29c:	ca 01       	movw	r24, r20
 29e:	9e 83       	std	Y+6, r25	; 0x06
 2a0:	8d 83       	std	Y+5, r24	; 0x05
  
  // handles a "division by 0" case
  if(delta_inrange == 0 || delta_outrange == 0)
 2a2:	8b 81       	ldd	r24, Y+3	; 0x03
 2a4:	9c 81       	ldd	r25, Y+4	; 0x04
 2a6:	89 2b       	or	r24, r25
 2a8:	21 f0       	breq	.+8      	; 0x2b2 <__stack+0x53>
 2aa:	8d 81       	ldd	r24, Y+5	; 0x05
 2ac:	9e 81       	ldd	r25, Y+6	; 0x06
 2ae:	89 2b       	or	r24, r25
 2b0:	29 f4       	brne	.+10     	; 0x2bc <__stack+0x5d>
  {
    // Returns the lowest value of output range
    mapped_value = start_out;
 2b2:	8f 85       	ldd	r24, Y+15	; 0x0f
 2b4:	98 89       	ldd	r25, Y+16	; 0x10
 2b6:	9a 83       	std	Y+2, r25	; 0x02
 2b8:	89 83       	std	Y+1, r24	; 0x01
 2ba:	4f c0       	rjmp	.+158    	; 0x35a <__stack+0xfb>
  }
  else
  {
	  X = clamp_in_range(X,start_in,end_in);
 2bc:	4d 85       	ldd	r20, Y+13	; 0x0d
 2be:	5e 85       	ldd	r21, Y+14	; 0x0e
 2c0:	2b 85       	ldd	r18, Y+11	; 0x0b
 2c2:	3c 85       	ldd	r19, Y+12	; 0x0c
 2c4:	89 85       	ldd	r24, Y+9	; 0x09
 2c6:	9a 85       	ldd	r25, Y+10	; 0x0a
 2c8:	b9 01       	movw	r22, r18
 2ca:	47 df       	rcall	.-370    	; 0x15a <_Z14clamp_in_rangejjj>
 2cc:	9a 87       	std	Y+10, r25	; 0x0a
 2ce:	89 87       	std	Y+9, r24	; 0x09
	  //if(X > 8000) X = 8000;
	  // Check for precision issues
	  if((delta_outrange/delta_inrange) < 1)
 2d0:	8d 81       	ldd	r24, Y+5	; 0x05
 2d2:	9e 81       	ldd	r25, Y+6	; 0x06
 2d4:	2b 81       	ldd	r18, Y+3	; 0x03
 2d6:	3c 81       	ldd	r19, Y+4	; 0x04
 2d8:	b9 01       	movw	r22, r18
 2da:	f7 d3       	rcall	.+2030   	; 0xaca <__udivmodhi4>
 2dc:	cb 01       	movw	r24, r22
 2de:	89 2b       	or	r24, r25
 2e0:	49 f4       	brne	.+18     	; 0x2f4 <__stack+0x95>
	  {
		  magnitude_order = delta_inrange / delta_outrange ;
 2e2:	8b 81       	ldd	r24, Y+3	; 0x03
 2e4:	9c 81       	ldd	r25, Y+4	; 0x04
 2e6:	2d 81       	ldd	r18, Y+5	; 0x05
 2e8:	3e 81       	ldd	r19, Y+6	; 0x06
 2ea:	b9 01       	movw	r22, r18
 2ec:	ee d3       	rcall	.+2012   	; 0xaca <__udivmodhi4>
 2ee:	cb 01       	movw	r24, r22
 2f0:	98 87       	std	Y+8, r25	; 0x08
 2f2:	8f 83       	std	Y+7, r24	; 0x07
	  }
	  
	  
	if( (int16_t)(X - start_in) < 0)  
 2f4:	29 85       	ldd	r18, Y+9	; 0x09
 2f6:	3a 85       	ldd	r19, Y+10	; 0x0a
 2f8:	8b 85       	ldd	r24, Y+11	; 0x0b
 2fa:	9c 85       	ldd	r25, Y+12	; 0x0c
 2fc:	a9 01       	movw	r20, r18
 2fe:	48 1b       	sub	r20, r24
 300:	59 0b       	sbc	r21, r25
 302:	ca 01       	movw	r24, r20
 304:	99 23       	and	r25, r25
 306:	ac f4       	brge	.+42     	; 0x332 <__stack+0xd3>
	{
		mapped_value = (start_in - X)/magnitude_order + start_out;
 308:	2b 85       	ldd	r18, Y+11	; 0x0b
 30a:	3c 85       	ldd	r19, Y+12	; 0x0c
 30c:	89 85       	ldd	r24, Y+9	; 0x09
 30e:	9a 85       	ldd	r25, Y+10	; 0x0a
 310:	a9 01       	movw	r20, r18
 312:	48 1b       	sub	r20, r24
 314:	59 0b       	sbc	r21, r25
 316:	ca 01       	movw	r24, r20
 318:	2f 81       	ldd	r18, Y+7	; 0x07
 31a:	38 85       	ldd	r19, Y+8	; 0x08
 31c:	b9 01       	movw	r22, r18
 31e:	d5 d3       	rcall	.+1962   	; 0xaca <__udivmodhi4>
 320:	cb 01       	movw	r24, r22
 322:	9c 01       	movw	r18, r24
 324:	8f 85       	ldd	r24, Y+15	; 0x0f
 326:	98 89       	ldd	r25, Y+16	; 0x10
 328:	82 0f       	add	r24, r18
 32a:	93 1f       	adc	r25, r19
 32c:	9a 83       	std	Y+2, r25	; 0x02
 32e:	89 83       	std	Y+1, r24	; 0x01
 330:	14 c0       	rjmp	.+40     	; 0x35a <__stack+0xfb>
	}
    else  
	{
		mapped_value = (X - start_in)/magnitude_order + start_out;
 332:	29 85       	ldd	r18, Y+9	; 0x09
 334:	3a 85       	ldd	r19, Y+10	; 0x0a
 336:	8b 85       	ldd	r24, Y+11	; 0x0b
 338:	9c 85       	ldd	r25, Y+12	; 0x0c
 33a:	a9 01       	movw	r20, r18
 33c:	48 1b       	sub	r20, r24
 33e:	59 0b       	sbc	r21, r25
 340:	ca 01       	movw	r24, r20
 342:	2f 81       	ldd	r18, Y+7	; 0x07
 344:	38 85       	ldd	r19, Y+8	; 0x08
 346:	b9 01       	movw	r22, r18
 348:	c0 d3       	rcall	.+1920   	; 0xaca <__udivmodhi4>
 34a:	cb 01       	movw	r24, r22
 34c:	9c 01       	movw	r18, r24
 34e:	8f 85       	ldd	r24, Y+15	; 0x0f
 350:	98 89       	ldd	r25, Y+16	; 0x10
 352:	82 0f       	add	r24, r18
 354:	93 1f       	adc	r25, r19
 356:	9a 83       	std	Y+2, r25	; 0x02
 358:	89 83       	std	Y+1, r24	; 0x01
	}
  }    
	mapped_value = clamp_in_range(mapped_value,MIN_DUTY,MAX_DUTY);
 35a:	89 81       	ldd	r24, Y+1	; 0x01
 35c:	9a 81       	ldd	r25, Y+2	; 0x02
 35e:	40 ef       	ldi	r20, 0xF0	; 240
 360:	50 e0       	ldi	r21, 0x00	; 0
 362:	60 e0       	ldi	r22, 0x00	; 0
 364:	70 e0       	ldi	r23, 0x00	; 0
 366:	f9 de       	rcall	.-526    	; 0x15a <_Z14clamp_in_rangejjj>
 368:	9a 83       	std	Y+2, r25	; 0x02
 36a:	89 83       	std	Y+1, r24	; 0x01
	return mapped_value;
 36c:	89 81       	ldd	r24, Y+1	; 0x01
 36e:	9a 81       	ldd	r25, Y+2	; 0x02
}
 370:	62 96       	adiw	r28, 0x12	; 18
 372:	0f b6       	in	r0, 0x3f	; 63
 374:	f8 94       	cli
 376:	de bf       	out	0x3e, r29	; 62
 378:	0f be       	out	0x3f, r0	; 63
 37a:	cd bf       	out	0x3d, r28	; 61
 37c:	df 91       	pop	r29
 37e:	cf 91       	pop	r28
 380:	1f 91       	pop	r17
 382:	0f 91       	pop	r16
 384:	08 95       	ret

00000386 <__vector_1>:

// Triggers on rising edges
ISR(INT0_vect)
{
 386:	1f 92       	push	r1
 388:	0f 92       	push	r0
 38a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
 38e:	0f 92       	push	r0
 390:	11 24       	eor	r1, r1
 392:	2f 93       	push	r18
 394:	8f 93       	push	r24
 396:	9f 93       	push	r25
 398:	ef 93       	push	r30
 39a:	ff 93       	push	r31
 39c:	cf 93       	push	r28
 39e:	df 93       	push	r29
 3a0:	cd b7       	in	r28, 0x3d	; 61
 3a2:	de b7       	in	r29, 0x3e	; 62
	if(freeze_input == 0)
 3a4:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <freeze_input>
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	99 23       	and	r25, r25
 3ac:	09 f0       	breq	.+2      	; 0x3b0 <__vector_1+0x2a>
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	88 23       	and	r24, r24
 3b2:	31 f1       	breq	.+76     	; 0x400 <__LOCK_REGION_LENGTH__>
	{
		cur_input_state = PINB & (1 << I_PORT);
 3b4:	86 e3       	ldi	r24, 0x36	; 54
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	fc 01       	movw	r30, r24
 3ba:	80 81       	ld	r24, Z
 3bc:	84 70       	andi	r24, 0x04	; 4
 3be:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <cur_input_state>
		// Note :  had issues with Rising edge only triggering (in simulation)
		// If current state is different from previously stored one
		if(cur_input_state != old_input_state)
 3c2:	20 91 71 00 	lds	r18, 0x0071	; 0x800071 <cur_input_state>
 3c6:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <old_input_state>
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	29 17       	cp	r18, r25
 3ce:	09 f4       	brne	.+2      	; 0x3d2 <__vector_1+0x4c>
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	88 23       	and	r24, r24
 3d4:	a9 f0       	breq	.+42     	; 0x400 <__LOCK_REGION_LENGTH__>
		{
			// If current state is high -> rising edge detected
			if(cur_input_state == (1 << I_PORT))
 3d6:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <cur_input_state>
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	94 30       	cpi	r25, 0x04	; 4
 3de:	09 f0       	breq	.+2      	; 0x3e2 <__vector_1+0x5c>
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	88 23       	and	r24, r24
 3e4:	49 f0       	breq	.+18     	; 0x3f8 <__vector_1+0x72>
			{
				pulse_count++;
 3e6:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <pulse_count>
 3ea:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <pulse_count+0x1>
 3ee:	01 96       	adiw	r24, 0x01	; 1
 3f0:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <pulse_count+0x1>
 3f4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <pulse_count>
			}
			// Updates old state (memory)
			old_input_state = cur_input_state;
 3f8:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <cur_input_state>
 3fc:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <old_input_state>
		}
	}
}
 400:	00 00       	nop
 402:	df 91       	pop	r29
 404:	cf 91       	pop	r28
 406:	ff 91       	pop	r31
 408:	ef 91       	pop	r30
 40a:	9f 91       	pop	r25
 40c:	8f 91       	pop	r24
 40e:	2f 91       	pop	r18
 410:	0f 90       	pop	r0
 412:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
 416:	0f 90       	pop	r0
 418:	1f 90       	pop	r1
 41a:	18 95       	reti

0000041c <_Z14compute_periodv>:

// This piece of code is used to compute the period of each pulse train.
void compute_period()
{
 41c:	cf 93       	push	r28
 41e:	df 93       	push	r29
 420:	cd b7       	in	r28, 0x3d	; 61
 422:	de b7       	in	r29, 0x3e	; 62
	// kind of mutex for pulse_count value
	freeze_input = 1;
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <freeze_input>
	if(pulse_count != 0){
 42a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <pulse_count>
 42e:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <pulse_count+0x1>
 432:	21 e0       	ldi	r18, 0x01	; 1
 434:	89 2b       	or	r24, r25
 436:	09 f4       	brne	.+2      	; 0x43a <_Z14compute_periodv+0x1e>
 438:	20 e0       	ldi	r18, 0x00	; 0
 43a:	22 23       	and	r18, r18
 43c:	59 f0       	breq	.+22     	; 0x454 <_Z14compute_periodv+0x38>
		cur_period = (pulse_counter_reset_time * MAGNET_NB) /pulse_count ;
 43e:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <pulse_count>
 442:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <pulse_count+0x1>
 446:	84 ef       	ldi	r24, 0xF4	; 244
 448:	91 e0       	ldi	r25, 0x01	; 1
 44a:	b9 01       	movw	r22, r18
 44c:	3e d3       	rcall	.+1660   	; 0xaca <__udivmodhi4>
 44e:	cb 01       	movw	r24, r22
 450:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <cur_period>
	}
	pulse_count=0;
 454:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <pulse_count+0x1>
 458:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <pulse_count>
	freeze_input = 0;
 45c:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <freeze_input>
}
 460:	00 00       	nop
 462:	df 91       	pop	r29
 464:	cf 91       	pop	r28
 466:	08 95       	ret

00000468 <_Z14convert_to_RPMj>:

uint16_t convert_to_RPM(const uint16_t period )
{
 468:	cf 93       	push	r28
 46a:	df 93       	push	r29
 46c:	00 d0       	rcall	.+0      	; 0x46e <_Z14convert_to_RPMj+0x6>
 46e:	00 d0       	rcall	.+0      	; 0x470 <_Z14convert_to_RPMj+0x8>
 470:	cd b7       	in	r28, 0x3d	; 61
 472:	de b7       	in	r29, 0x3e	; 62
 474:	9c 83       	std	Y+4, r25	; 0x04
 476:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t RPM = 0;
 478:	1a 82       	std	Y+2, r1	; 0x02
 47a:	19 82       	std	Y+1, r1	; 0x01
	if(period != 0)
 47c:	8b 81       	ldd	r24, Y+3	; 0x03
 47e:	9c 81       	ldd	r25, Y+4	; 0x04
 480:	89 2b       	or	r24, r25
 482:	81 f0       	breq	.+32     	; 0x4a4 <_Z14convert_to_RPMj+0x3c>
	{
		RPM = 60000 / period;		
 484:	8b 81       	ldd	r24, Y+3	; 0x03
 486:	9c 81       	ldd	r25, Y+4	; 0x04
 488:	9c 01       	movw	r18, r24
 48a:	40 e0       	ldi	r20, 0x00	; 0
 48c:	50 e0       	ldi	r21, 0x00	; 0
 48e:	80 e6       	ldi	r24, 0x60	; 96
 490:	9a ee       	ldi	r25, 0xEA	; 234
 492:	a0 e0       	ldi	r26, 0x00	; 0
 494:	b0 e0       	ldi	r27, 0x00	; 0
 496:	bc 01       	movw	r22, r24
 498:	cd 01       	movw	r24, r26
 49a:	2b d3       	rcall	.+1622   	; 0xaf2 <__divmodsi4>
 49c:	da 01       	movw	r26, r20
 49e:	c9 01       	movw	r24, r18
 4a0:	9a 83       	std	Y+2, r25	; 0x02
 4a2:	89 83       	std	Y+1, r24	; 0x01
	}

	return RPM;
 4a4:	89 81       	ldd	r24, Y+1	; 0x01
 4a6:	9a 81       	ldd	r25, Y+2	; 0x02
}
 4a8:	0f 90       	pop	r0
 4aa:	0f 90       	pop	r0
 4ac:	0f 90       	pop	r0
 4ae:	0f 90       	pop	r0
 4b0:	df 91       	pop	r29
 4b2:	cf 91       	pop	r28
 4b4:	08 95       	ret

000004b6 <_Z15init_Timekeeperv>:


// Initialization of the timer dedicated to hold the time
// The timer used for this purpose is the Timer / Counter 0
void init_Timekeeper(void)
{
 4b6:	cf 93       	push	r28
 4b8:	df 93       	push	r29
 4ba:	cd b7       	in	r28, 0x3d	; 61
 4bc:	de b7       	in	r29, 0x3e	; 62
  TCCR0A |= 1<<WGM01; // CTC OCR0A
 4be:	8a e4       	ldi	r24, 0x4A	; 74
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	2a e4       	ldi	r18, 0x4A	; 74
 4c4:	30 e0       	ldi	r19, 0x00	; 0
 4c6:	f9 01       	movw	r30, r18
 4c8:	20 81       	ld	r18, Z
 4ca:	22 60       	ori	r18, 0x02	; 2
 4cc:	fc 01       	movw	r30, r24
 4ce:	20 83       	st	Z, r18
  TCCR0B |= ( 1 << CS00) | (1 << CS01); // prescaler of 64
 4d0:	83 e5       	ldi	r24, 0x53	; 83
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	23 e5       	ldi	r18, 0x53	; 83
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	f9 01       	movw	r30, r18
 4da:	20 81       	ld	r18, Z
 4dc:	23 60       	ori	r18, 0x03	; 3
 4de:	fc 01       	movw	r30, r24
 4e0:	20 83       	st	Z, r18
  TIMSK |= (1 << OCIE0A) ;        // Using OCR0A as compare match
 4e2:	89 e5       	ldi	r24, 0x59	; 89
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	29 e5       	ldi	r18, 0x59	; 89
 4e8:	30 e0       	ldi	r19, 0x00	; 0
 4ea:	f9 01       	movw	r30, r18
 4ec:	20 81       	ld	r18, Z
 4ee:	20 61       	ori	r18, 0x10	; 16
 4f0:	fc 01       	movw	r30, r24
 4f2:	20 83       	st	Z, r18
  OCR0A = F_CPU / 64000;  // Computes the number of ticks needed to provide 1ms. 
 4f4:	89 e4       	ldi	r24, 0x49	; 73
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	2d e7       	ldi	r18, 0x7D	; 125
 4fa:	fc 01       	movw	r30, r24
 4fc:	20 83       	st	Z, r18
  //OCR0A = 125;  // Computes the number of ticks needed to provide 1ms. 
  cur_time.ms = 0;      // Initializes the value of millisecond 
 4fe:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <cur_time+0x1>
 502:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <cur_time>
  TCNT0 = 0;            // Initialize the timer to the BOTTOM value
 506:	82 e5       	ldi	r24, 0x52	; 82
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	fc 01       	movw	r30, r24
 50c:	10 82       	st	Z, r1
}
 50e:	00 00       	nop
 510:	df 91       	pop	r29
 512:	cf 91       	pop	r28
 514:	08 95       	ret

00000516 <_Z12init_PWM_OUTv>:

void init_PWM_OUT(void){
 516:	cf 93       	push	r28
 518:	df 93       	push	r29
 51a:	cd b7       	in	r28, 0x3d	; 61
 51c:	de b7       	in	r29, 0x3e	; 62
  PLLCSR = 0;       // Disables Peripheral clock source. only internal
 51e:	87 e4       	ldi	r24, 0x47	; 71
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	fc 01       	movw	r30, r24
 524:	10 82       	st	Z, r1
  TCCR1 = (1 << CS12) | (1 << CS11) ; // Enabling Ck / 32 prescaler, every other bit is set to 0
 526:	80 e5       	ldi	r24, 0x50	; 80
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	26 e0       	ldi	r18, 0x06	; 6
 52c:	fc 01       	movw	r30, r24
 52e:	20 83       	st	Z, r18
  TCNT1 = 0;
 530:	8f e4       	ldi	r24, 0x4F	; 79
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	fc 01       	movw	r30, r24
 536:	10 82       	st	Z, r1
  TIMSK |= (1 << OCIE1A) | (1 << OCIE1B);
 538:	89 e5       	ldi	r24, 0x59	; 89
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	29 e5       	ldi	r18, 0x59	; 89
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	f9 01       	movw	r30, r18
 542:	20 81       	ld	r18, Z
 544:	20 66       	ori	r18, 0x60	; 96
 546:	fc 01       	movw	r30, r24
 548:	20 83       	st	Z, r18
  OCR1A = F_CPU/(32*DAC_Frequency);    // Maximum Tick for one period of output frequency :: 250 ticks / 1 kHz
 54a:	8e e4       	ldi	r24, 0x4E	; 78
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	2a ef       	ldi	r18, 0xFA	; 250
 550:	fc 01       	movw	r30, r24
 552:	20 83       	st	Z, r18
  OCR1B = 20;
 554:	8b e4       	ldi	r24, 0x4B	; 75
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	24 e1       	ldi	r18, 0x14	; 20
 55a:	fc 01       	movw	r30, r24
 55c:	20 83       	st	Z, r18
}
 55e:	00 00       	nop
 560:	df 91       	pop	r29
 562:	cf 91       	pop	r28
 564:	08 95       	ret

00000566 <__vector_10>:

// Handles the time keeping routine
// This ISR is called whenever we hit the correct number of ticks (250 for 16 MHz and 125 for 8 MHz clocks)
ISR(TIMER0_COMPA_vect)
{
 566:	1f 92       	push	r1
 568:	0f 92       	push	r0
 56a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
 56e:	0f 92       	push	r0
 570:	11 24       	eor	r1, r1
 572:	2f 93       	push	r18
 574:	3f 93       	push	r19
 576:	4f 93       	push	r20
 578:	5f 93       	push	r21
 57a:	6f 93       	push	r22
 57c:	7f 93       	push	r23
 57e:	8f 93       	push	r24
 580:	9f 93       	push	r25
 582:	af 93       	push	r26
 584:	bf 93       	push	r27
 586:	ef 93       	push	r30
 588:	ff 93       	push	r31
 58a:	cf 93       	push	r28
 58c:	df 93       	push	r29
 58e:	cd b7       	in	r28, 0x3d	; 61
 590:	de b7       	in	r29, 0x3e	; 62
   cur_time.inc_ms(); // add one millisecond
 592:	89 e6       	ldi	r24, 0x69	; 105
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	65 d2       	rcall	.+1226   	; 0xa62 <_ZNV4date6inc_msEv>
   if(cur_time.ms >= pulse_counter_reset_time){
 598:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <cur_time>
 59c:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <cur_time+0x1>
 5a0:	21 e0       	ldi	r18, 0x01	; 1
 5a2:	8a 3f       	cpi	r24, 0xFA	; 250
 5a4:	91 05       	cpc	r25, r1
 5a6:	08 f4       	brcc	.+2      	; 0x5aa <__vector_10+0x44>
 5a8:	20 e0       	ldi	r18, 0x00	; 0
 5aa:	22 23       	and	r18, r18
 5ac:	49 f0       	breq	.+18     	; 0x5c0 <__vector_10+0x5a>
	   cur_time.ms = 0;
 5ae:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <cur_time+0x1>
 5b2:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <cur_time>
	   pulse_counter_resets++;
 5b6:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <pulse_counter_resets>
 5ba:	8f 5f       	subi	r24, 0xFF	; 255
 5bc:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <pulse_counter_resets>
   }
 }
 5c0:	00 00       	nop
 5c2:	df 91       	pop	r29
 5c4:	cf 91       	pop	r28
 5c6:	ff 91       	pop	r31
 5c8:	ef 91       	pop	r30
 5ca:	bf 91       	pop	r27
 5cc:	af 91       	pop	r26
 5ce:	9f 91       	pop	r25
 5d0:	8f 91       	pop	r24
 5d2:	7f 91       	pop	r23
 5d4:	6f 91       	pop	r22
 5d6:	5f 91       	pop	r21
 5d8:	4f 91       	pop	r20
 5da:	3f 91       	pop	r19
 5dc:	2f 91       	pop	r18
 5de:	0f 90       	pop	r0
 5e0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
 5e4:	0f 90       	pop	r0
 5e6:	1f 90       	pop	r1
 5e8:	18 95       	reti

000005ea <__vector_3>:

// Timer 1 sets the output port to high state when it overflows
ISR(TIMER1_COMPA_vect){
 5ea:	1f 92       	push	r1
 5ec:	0f 92       	push	r0
 5ee:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
 5f2:	0f 92       	push	r0
 5f4:	11 24       	eor	r1, r1
 5f6:	2f 93       	push	r18
 5f8:	3f 93       	push	r19
 5fa:	8f 93       	push	r24
 5fc:	9f 93       	push	r25
 5fe:	ef 93       	push	r30
 600:	ff 93       	push	r31
 602:	cf 93       	push	r28
 604:	df 93       	push	r29
 606:	cd b7       	in	r28, 0x3d	; 61
 608:	de b7       	in	r29, 0x3e	; 62
if(cur_duty_cycle > MIN_DUTY && cur_duty_cycle < MAX_DUTY){
 60a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <cur_duty_cycle>
 60e:	88 23       	and	r24, r24
 610:	31 f0       	breq	.+12     	; 0x61e <__vector_3+0x34>
 612:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <cur_duty_cycle>
 616:	80 3f       	cpi	r24, 0xF0	; 240
 618:	10 f4       	brcc	.+4      	; 0x61e <__vector_3+0x34>
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	01 c0       	rjmp	.+2      	; 0x620 <__vector_3+0x36>
 61e:	80 e0       	ldi	r24, 0x00	; 0
 620:	88 23       	and	r24, r24
 622:	e9 f0       	breq	.+58     	; 0x65e <__vector_3+0x74>
  PORTB |= 1 << O_PORT; // Flips the output pin to high
 624:	88 e3       	ldi	r24, 0x38	; 56
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	28 e3       	ldi	r18, 0x38	; 56
 62a:	30 e0       	ldi	r19, 0x00	; 0
 62c:	f9 01       	movw	r30, r18
 62e:	20 81       	ld	r18, Z
 630:	22 60       	ori	r18, 0x02	; 2
 632:	fc 01       	movw	r30, r24
 634:	20 83       	st	Z, r18
  TIMSK |= 1 << OCIE1B; // Enables the output compare Interruption
 636:	89 e5       	ldi	r24, 0x59	; 89
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	29 e5       	ldi	r18, 0x59	; 89
 63c:	30 e0       	ldi	r19, 0x00	; 0
 63e:	f9 01       	movw	r30, r18
 640:	20 81       	ld	r18, Z
 642:	20 62       	ori	r18, 0x20	; 32
 644:	fc 01       	movw	r30, r24
 646:	20 83       	st	Z, r18
  OCR1B = cur_duty_cycle;
 648:	8b e4       	ldi	r24, 0x4B	; 75
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <cur_duty_cycle>
 650:	fc 01       	movw	r30, r24
 652:	20 83       	st	Z, r18
  TCNT1 = 0;
 654:	8f e4       	ldi	r24, 0x4F	; 79
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	fc 01       	movw	r30, r24
 65a:	10 82       	st	Z, r1
  return;
 65c:	1f c0       	rjmp	.+62     	; 0x69c <__vector_3+0xb2>
}
else if(cur_duty_cycle > MAX_DUTY)
 65e:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <cur_duty_cycle>
 662:	81 e0       	ldi	r24, 0x01	; 1
 664:	91 3f       	cpi	r25, 0xF1	; 241
 666:	08 f4       	brcc	.+2      	; 0x66a <__vector_3+0x80>
 668:	80 e0       	ldi	r24, 0x00	; 0
 66a:	88 23       	and	r24, r24
 66c:	51 f0       	breq	.+20     	; 0x682 <__vector_3+0x98>
{
	// Flip on the output
	PORTB |= (1 << O_PORT);
 66e:	88 e3       	ldi	r24, 0x38	; 56
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	28 e3       	ldi	r18, 0x38	; 56
 674:	30 e0       	ldi	r19, 0x00	; 0
 676:	f9 01       	movw	r30, r18
 678:	20 81       	ld	r18, Z
 67a:	22 60       	ori	r18, 0x02	; 2
 67c:	fc 01       	movw	r30, r24
 67e:	20 83       	st	Z, r18
 680:	09 c0       	rjmp	.+18     	; 0x694 <__vector_3+0xaa>
}
else
{
	// Shuts down the output 
	PORTB &= ~(1 << O_PORT);  
 682:	88 e3       	ldi	r24, 0x38	; 56
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	28 e3       	ldi	r18, 0x38	; 56
 688:	30 e0       	ldi	r19, 0x00	; 0
 68a:	f9 01       	movw	r30, r18
 68c:	20 81       	ld	r18, Z
 68e:	2d 7f       	andi	r18, 0xFD	; 253
 690:	fc 01       	movw	r30, r24
 692:	20 83       	st	Z, r18
}
TCNT1 = 0;
 694:	8f e4       	ldi	r24, 0x4F	; 79
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	fc 01       	movw	r30, r24
 69a:	10 82       	st	Z, r1
}
 69c:	df 91       	pop	r29
 69e:	cf 91       	pop	r28
 6a0:	ff 91       	pop	r31
 6a2:	ef 91       	pop	r30
 6a4:	9f 91       	pop	r25
 6a6:	8f 91       	pop	r24
 6a8:	3f 91       	pop	r19
 6aa:	2f 91       	pop	r18
 6ac:	0f 90       	pop	r0
 6ae:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
 6b2:	0f 90       	pop	r0
 6b4:	1f 90       	pop	r1
 6b6:	18 95       	reti

000006b8 <__vector_9>:

// Timer 1 Output Compare A enable
ISR(TIMER1_COMPB_vect){
 6b8:	1f 92       	push	r1
 6ba:	0f 92       	push	r0
 6bc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
 6c0:	0f 92       	push	r0
 6c2:	11 24       	eor	r1, r1
 6c4:	2f 93       	push	r18
 6c6:	3f 93       	push	r19
 6c8:	8f 93       	push	r24
 6ca:	9f 93       	push	r25
 6cc:	ef 93       	push	r30
 6ce:	ff 93       	push	r31
 6d0:	cf 93       	push	r28
 6d2:	df 93       	push	r29
 6d4:	cd b7       	in	r28, 0x3d	; 61
 6d6:	de b7       	in	r29, 0x3e	; 62
PORTB &= ~(1 << O_PORT); // Switches down the output pin
 6d8:	88 e3       	ldi	r24, 0x38	; 56
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	28 e3       	ldi	r18, 0x38	; 56
 6de:	30 e0       	ldi	r19, 0x00	; 0
 6e0:	f9 01       	movw	r30, r18
 6e2:	20 81       	ld	r18, Z
 6e4:	2d 7f       	andi	r18, 0xFD	; 253
 6e6:	fc 01       	movw	r30, r24
 6e8:	20 83       	st	Z, r18
}
 6ea:	00 00       	nop
 6ec:	df 91       	pop	r29
 6ee:	cf 91       	pop	r28
 6f0:	ff 91       	pop	r31
 6f2:	ef 91       	pop	r30
 6f4:	9f 91       	pop	r25
 6f6:	8f 91       	pop	r24
 6f8:	3f 91       	pop	r19
 6fa:	2f 91       	pop	r18
 6fc:	0f 90       	pop	r0
 6fe:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__EEPROM_REGION_LENGTH__+0x7f005f>
 702:	0f 90       	pop	r0
 704:	1f 90       	pop	r1
 706:	18 95       	reti

00000708 <_Z14enable_ext_intv>:

void enable_ext_int(void){
 708:	cf 93       	push	r28
 70a:	df 93       	push	r29
 70c:	cd b7       	in	r28, 0x3d	; 61
 70e:	de b7       	in	r29, 0x3e	; 62
//MCUCR = (1 << ISC01) | (1 << ISC00);  // Enabling the INT0 pin to trigger on rising edge only
MCUCR = (1 << ISC00);		  // Enabling the INT0 pin to trigger on any logical change (high or low)
 710:	85 e5       	ldi	r24, 0x55	; 85
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	21 e0       	ldi	r18, 0x01	; 1
 716:	fc 01       	movw	r30, r24
 718:	20 83       	st	Z, r18
GIMSK |= (1 << INT0);         // Enabling INT0 to trigger the interrupt service routine on PB2 (ATtiny85)
 71a:	8b e5       	ldi	r24, 0x5B	; 91
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	2b e5       	ldi	r18, 0x5B	; 91
 720:	30 e0       	ldi	r19, 0x00	; 0
 722:	f9 01       	movw	r30, r18
 724:	20 81       	ld	r18, Z
 726:	20 64       	ori	r18, 0x40	; 64
 728:	fc 01       	movw	r30, r24
 72a:	20 83       	st	Z, r18
I_DDR &= ~(1 << I_PORT);      // Enables Port B 2 as an INPUT
 72c:	87 e3       	ldi	r24, 0x37	; 55
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	27 e3       	ldi	r18, 0x37	; 55
 732:	30 e0       	ldi	r19, 0x00	; 0
 734:	f9 01       	movw	r30, r18
 736:	20 81       	ld	r18, Z
 738:	2b 7f       	andi	r18, 0xFB	; 251
 73a:	fc 01       	movw	r30, r24
 73c:	20 83       	st	Z, r18
O_DDR |= 1 << O_PORT;         // Enables Port B 1 as an OUTPUT
 73e:	87 e3       	ldi	r24, 0x37	; 55
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	27 e3       	ldi	r18, 0x37	; 55
 744:	30 e0       	ldi	r19, 0x00	; 0
 746:	f9 01       	movw	r30, r18
 748:	20 81       	ld	r18, Z
 74a:	22 60       	ori	r18, 0x02	; 2
 74c:	fc 01       	movw	r30, r24
 74e:	20 83       	st	Z, r18
PORTB &= ~(1 << O_PORT);      // Switches off output pin
 750:	88 e3       	ldi	r24, 0x38	; 56
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	28 e3       	ldi	r18, 0x38	; 56
 756:	30 e0       	ldi	r19, 0x00	; 0
 758:	f9 01       	movw	r30, r18
 75a:	20 81       	ld	r18, Z
 75c:	2d 7f       	andi	r18, 0xFD	; 253
 75e:	fc 01       	movw	r30, r24
 760:	20 83       	st	Z, r18
}
 762:	00 00       	nop
 764:	df 91       	pop	r29
 766:	cf 91       	pop	r28
 768:	08 95       	ret

0000076a <main>:


int main(void)
{
 76a:	0f 93       	push	r16
 76c:	1f 93       	push	r17
 76e:	cf 93       	push	r28
 770:	df 93       	push	r29
 772:	00 d0       	rcall	.+0      	; 0x774 <main+0xa>
 774:	cd b7       	in	r28, 0x3d	; 61
 776:	de b7       	in	r29, 0x3e	; 62
	uint16_t current_RPM = 0;
 778:	1a 82       	std	Y+2, r1	; 0x02
 77a:	19 82       	std	Y+1, r1	; 0x01
	cli();
 77c:	f8 94       	cli
    enable_ext_int();
 77e:	c4 df       	rcall	.-120    	; 0x708 <_Z14enable_ext_intv>
    init_array();
 780:	75 dc       	rcall	.-1814   	; 0x6c <_Z10init_arrayv>
	init_Timekeeper();
 782:	99 de       	rcall	.-718    	; 0x4b6 <_Z15init_Timekeeperv>
	init_PWM_OUT();
 784:	c8 de       	rcall	.-624    	; 0x516 <_Z12init_PWM_OUTv>
    sei();
 786:	78 94       	sei
    while (1) 
    {
#if 1
		if(pulse_counter_resets != 0){
 788:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <pulse_counter_resets>
 78c:	81 e0       	ldi	r24, 0x01	; 1
 78e:	99 23       	and	r25, r25
 790:	09 f4       	brne	.+2      	; 0x794 <main+0x2a>
 792:	80 e0       	ldi	r24, 0x00	; 0
 794:	88 23       	and	r24, r24
 796:	31 f0       	breq	.+12     	; 0x7a4 <main+0x3a>
			compute_period();
 798:	41 de       	rcall	.-894    	; 0x41c <_Z14compute_periodv>
			push_period(cur_period);
 79a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <cur_period>
 79e:	87 dc       	rcall	.-1778   	; 0xae <_Z11push_periodh>
			pulse_counter_resets = 0 ;
 7a0:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <pulse_counter_resets>
		}

		current_RPM = convert_to_RPM(avg_period);	
 7a4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <avg_period>
 7a8:	88 2f       	mov	r24, r24
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	5d de       	rcall	.-838    	; 0x468 <_Z14convert_to_RPMj>
 7ae:	9a 83       	std	Y+2, r25	; 0x02
 7b0:	89 83       	std	Y+1, r24	; 0x01
		cur_duty_cycle = interpol(current_RPM, MINRPM, MAXRPM, MIN_DUTY , MAX_DUTY);	
 7b2:	89 81       	ldd	r24, Y+1	; 0x01
 7b4:	9a 81       	ldd	r25, Y+2	; 0x02
 7b6:	00 ef       	ldi	r16, 0xF0	; 240
 7b8:	10 e0       	ldi	r17, 0x00	; 0
 7ba:	20 e0       	ldi	r18, 0x00	; 0
 7bc:	30 e0       	ldi	r19, 0x00	; 0
 7be:	48 e2       	ldi	r20, 0x28	; 40
 7c0:	53 e2       	ldi	r21, 0x23	; 35
 7c2:	64 ef       	ldi	r22, 0xF4	; 244
 7c4:	71 e0       	ldi	r23, 0x01	; 1
 7c6:	17 dd       	rcall	.-1490   	; 0x1f6 <_Z8interpoljjjjj>
 7c8:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <cur_duty_cycle>
    enable_ext_int();
    init_array();
	init_Timekeeper();
	init_PWM_OUT();
    sei();
    while (1) 
 7cc:	dd cf       	rjmp	.-70     	; 0x788 <main+0x1e>

000007ce <_Z41__static_initialization_and_destruction_0ii>:
		current_RPM = convert_to_RPM(avg_period);	
		cur_duty_cycle = interpol(current_RPM, MINRPM, MAXRPM, MIN_DUTY , MAX_DUTY);	
#endif
		//cur_duty_cycle = 240;
    }
}
 7ce:	cf 93       	push	r28
 7d0:	df 93       	push	r29
 7d2:	00 d0       	rcall	.+0      	; 0x7d4 <_Z41__static_initialization_and_destruction_0ii+0x6>
 7d4:	00 d0       	rcall	.+0      	; 0x7d6 <_Z41__static_initialization_and_destruction_0ii+0x8>
 7d6:	cd b7       	in	r28, 0x3d	; 61
 7d8:	de b7       	in	r29, 0x3e	; 62
 7da:	9a 83       	std	Y+2, r25	; 0x02
 7dc:	89 83       	std	Y+1, r24	; 0x01
 7de:	7c 83       	std	Y+4, r23	; 0x04
 7e0:	6b 83       	std	Y+3, r22	; 0x03
 7e2:	89 81       	ldd	r24, Y+1	; 0x01
 7e4:	9a 81       	ldd	r25, Y+2	; 0x02
 7e6:	01 97       	sbiw	r24, 0x01	; 1
 7e8:	39 f4       	brne	.+14     	; 0x7f8 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 7ea:	8b 81       	ldd	r24, Y+3	; 0x03
 7ec:	9c 81       	ldd	r25, Y+4	; 0x04
 7ee:	01 96       	adiw	r24, 0x01	; 1
 7f0:	19 f4       	brne	.+6      	; 0x7f8 <_Z41__static_initialization_and_destruction_0ii+0x2a>
const uint8_t MIN_DUTY = 0;         // Determines the minimum Duty cycle resolution (number of 'Ticks')
const uint8_t MAX_DUTY = 240;       // Determines the maximum Duty cycle resolution (Note : 250 or even 245 is too high and is not interpreted correctly)


// Declaring time-dependent variables (hold proper time of pulses)
volatile date cur_time;
 7f2:	89 e6       	ldi	r24, 0x69	; 105
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	14 d0       	rcall	.+40     	; 0x820 <_ZN4dateC1Ev>
		current_RPM = convert_to_RPM(avg_period);	
		cur_duty_cycle = interpol(current_RPM, MINRPM, MAXRPM, MIN_DUTY , MAX_DUTY);	
#endif
		//cur_duty_cycle = 240;
    }
}
 7f8:	00 00       	nop
 7fa:	0f 90       	pop	r0
 7fc:	0f 90       	pop	r0
 7fe:	0f 90       	pop	r0
 800:	0f 90       	pop	r0
 802:	df 91       	pop	r29
 804:	cf 91       	pop	r28
 806:	08 95       	ret

00000808 <_GLOBAL__sub_I_cur_period_index>:
 808:	cf 93       	push	r28
 80a:	df 93       	push	r29
 80c:	cd b7       	in	r28, 0x3d	; 61
 80e:	de b7       	in	r29, 0x3e	; 62
 810:	6f ef       	ldi	r22, 0xFF	; 255
 812:	7f ef       	ldi	r23, 0xFF	; 255
 814:	81 e0       	ldi	r24, 0x01	; 1
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	da df       	rcall	.-76     	; 0x7ce <_Z41__static_initialization_and_destruction_0ii>
 81a:	df 91       	pop	r29
 81c:	cf 91       	pop	r28
 81e:	08 95       	ret

00000820 <_ZN4dateC1Ev>:
}

void date::inc_ms() 
{
	add_date(date(1,0,0,0));
}
 820:	cf 93       	push	r28
 822:	df 93       	push	r29
 824:	00 d0       	rcall	.+0      	; 0x826 <_ZN4dateC1Ev+0x6>
 826:	cd b7       	in	r28, 0x3d	; 61
 828:	de b7       	in	r29, 0x3e	; 62
 82a:	9a 83       	std	Y+2, r25	; 0x02
 82c:	89 83       	std	Y+1, r24	; 0x01
 82e:	89 81       	ldd	r24, Y+1	; 0x01
 830:	9a 81       	ldd	r25, Y+2	; 0x02
 832:	fc 01       	movw	r30, r24
 834:	11 82       	std	Z+1, r1	; 0x01
 836:	10 82       	st	Z, r1
 838:	89 81       	ldd	r24, Y+1	; 0x01
 83a:	9a 81       	ldd	r25, Y+2	; 0x02
 83c:	fc 01       	movw	r30, r24
 83e:	12 82       	std	Z+2, r1	; 0x02
 840:	89 81       	ldd	r24, Y+1	; 0x01
 842:	9a 81       	ldd	r25, Y+2	; 0x02
 844:	fc 01       	movw	r30, r24
 846:	13 82       	std	Z+3, r1	; 0x03
 848:	89 81       	ldd	r24, Y+1	; 0x01
 84a:	9a 81       	ldd	r25, Y+2	; 0x02
 84c:	fc 01       	movw	r30, r24
 84e:	14 82       	std	Z+4, r1	; 0x04
 850:	00 00       	nop
 852:	0f 90       	pop	r0
 854:	0f 90       	pop	r0
 856:	df 91       	pop	r29
 858:	cf 91       	pop	r28
 85a:	08 95       	ret

0000085c <_ZN4dateC1Ejhhh>:
 85c:	0f 93       	push	r16
 85e:	cf 93       	push	r28
 860:	df 93       	push	r29
 862:	cd b7       	in	r28, 0x3d	; 61
 864:	de b7       	in	r29, 0x3e	; 62
 866:	27 97       	sbiw	r28, 0x07	; 7
 868:	0f b6       	in	r0, 0x3f	; 63
 86a:	f8 94       	cli
 86c:	de bf       	out	0x3e, r29	; 62
 86e:	0f be       	out	0x3f, r0	; 63
 870:	cd bf       	out	0x3d, r28	; 61
 872:	9a 83       	std	Y+2, r25	; 0x02
 874:	89 83       	std	Y+1, r24	; 0x01
 876:	7c 83       	std	Y+4, r23	; 0x04
 878:	6b 83       	std	Y+3, r22	; 0x03
 87a:	4d 83       	std	Y+5, r20	; 0x05
 87c:	2e 83       	std	Y+6, r18	; 0x06
 87e:	0f 83       	std	Y+7, r16	; 0x07
 880:	89 81       	ldd	r24, Y+1	; 0x01
 882:	9a 81       	ldd	r25, Y+2	; 0x02
 884:	2b 81       	ldd	r18, Y+3	; 0x03
 886:	3c 81       	ldd	r19, Y+4	; 0x04
 888:	fc 01       	movw	r30, r24
 88a:	31 83       	std	Z+1, r19	; 0x01
 88c:	20 83       	st	Z, r18
 88e:	89 81       	ldd	r24, Y+1	; 0x01
 890:	9a 81       	ldd	r25, Y+2	; 0x02
 892:	2d 81       	ldd	r18, Y+5	; 0x05
 894:	fc 01       	movw	r30, r24
 896:	22 83       	std	Z+2, r18	; 0x02
 898:	89 81       	ldd	r24, Y+1	; 0x01
 89a:	9a 81       	ldd	r25, Y+2	; 0x02
 89c:	2e 81       	ldd	r18, Y+6	; 0x06
 89e:	fc 01       	movw	r30, r24
 8a0:	23 83       	std	Z+3, r18	; 0x03
 8a2:	89 81       	ldd	r24, Y+1	; 0x01
 8a4:	9a 81       	ldd	r25, Y+2	; 0x02
 8a6:	2f 81       	ldd	r18, Y+7	; 0x07
 8a8:	fc 01       	movw	r30, r24
 8aa:	24 83       	std	Z+4, r18	; 0x04
 8ac:	00 00       	nop
 8ae:	27 96       	adiw	r28, 0x07	; 7
 8b0:	0f b6       	in	r0, 0x3f	; 63
 8b2:	f8 94       	cli
 8b4:	de bf       	out	0x3e, r29	; 62
 8b6:	0f be       	out	0x3f, r0	; 63
 8b8:	cd bf       	out	0x3d, r28	; 61
 8ba:	df 91       	pop	r29
 8bc:	cf 91       	pop	r28
 8be:	0f 91       	pop	r16
 8c0:	08 95       	ret

000008c2 <_ZNV4date8add_dateES_>:
 8c2:	cf 93       	push	r28
 8c4:	df 93       	push	r29
 8c6:	cd b7       	in	r28, 0x3d	; 61
 8c8:	de b7       	in	r29, 0x3e	; 62
 8ca:	27 97       	sbiw	r28, 0x07	; 7
 8cc:	0f b6       	in	r0, 0x3f	; 63
 8ce:	f8 94       	cli
 8d0:	de bf       	out	0x3e, r29	; 62
 8d2:	0f be       	out	0x3f, r0	; 63
 8d4:	cd bf       	out	0x3d, r28	; 61
 8d6:	9a 83       	std	Y+2, r25	; 0x02
 8d8:	89 83       	std	Y+1, r24	; 0x01
 8da:	2b 83       	std	Y+3, r18	; 0x03
 8dc:	3c 83       	std	Y+4, r19	; 0x04
 8de:	4d 83       	std	Y+5, r20	; 0x05
 8e0:	5e 83       	std	Y+6, r21	; 0x06
 8e2:	6f 83       	std	Y+7, r22	; 0x07
 8e4:	89 81       	ldd	r24, Y+1	; 0x01
 8e6:	9a 81       	ldd	r25, Y+2	; 0x02
 8e8:	fc 01       	movw	r30, r24
 8ea:	20 81       	ld	r18, Z
 8ec:	31 81       	ldd	r19, Z+1	; 0x01
 8ee:	8b 81       	ldd	r24, Y+3	; 0x03
 8f0:	9c 81       	ldd	r25, Y+4	; 0x04
 8f2:	28 0f       	add	r18, r24
 8f4:	39 1f       	adc	r19, r25
 8f6:	89 81       	ldd	r24, Y+1	; 0x01
 8f8:	9a 81       	ldd	r25, Y+2	; 0x02
 8fa:	fc 01       	movw	r30, r24
 8fc:	31 83       	std	Z+1, r19	; 0x01
 8fe:	20 83       	st	Z, r18
 900:	89 81       	ldd	r24, Y+1	; 0x01
 902:	9a 81       	ldd	r25, Y+2	; 0x02
 904:	fc 01       	movw	r30, r24
 906:	80 81       	ld	r24, Z
 908:	91 81       	ldd	r25, Z+1	; 0x01
 90a:	21 e0       	ldi	r18, 0x01	; 1
 90c:	88 3e       	cpi	r24, 0xE8	; 232
 90e:	93 40       	sbci	r25, 0x03	; 3
 910:	08 f4       	brcc	.+2      	; 0x914 <_ZNV4date8add_dateES_+0x52>
 912:	20 e0       	ldi	r18, 0x00	; 0
 914:	22 23       	and	r18, r18
 916:	09 f4       	brne	.+2      	; 0x91a <_ZNV4date8add_dateES_+0x58>
 918:	96 c0       	rjmp	.+300    	; 0xa46 <_ZNV4date8add_dateES_+0x184>
 91a:	89 81       	ldd	r24, Y+1	; 0x01
 91c:	9a 81       	ldd	r25, Y+2	; 0x02
 91e:	fc 01       	movw	r30, r24
 920:	80 81       	ld	r24, Z
 922:	91 81       	ldd	r25, Z+1	; 0x01
 924:	28 ee       	ldi	r18, 0xE8	; 232
 926:	33 e0       	ldi	r19, 0x03	; 3
 928:	b9 01       	movw	r22, r18
 92a:	cf d0       	rcall	.+414    	; 0xaca <__udivmodhi4>
 92c:	9c 01       	movw	r18, r24
 92e:	89 81       	ldd	r24, Y+1	; 0x01
 930:	9a 81       	ldd	r25, Y+2	; 0x02
 932:	fc 01       	movw	r30, r24
 934:	31 83       	std	Z+1, r19	; 0x01
 936:	20 83       	st	Z, r18
 938:	89 81       	ldd	r24, Y+1	; 0x01
 93a:	9a 81       	ldd	r25, Y+2	; 0x02
 93c:	fc 01       	movw	r30, r24
 93e:	82 81       	ldd	r24, Z+2	; 0x02
 940:	21 e0       	ldi	r18, 0x01	; 1
 942:	28 0f       	add	r18, r24
 944:	89 81       	ldd	r24, Y+1	; 0x01
 946:	9a 81       	ldd	r25, Y+2	; 0x02
 948:	fc 01       	movw	r30, r24
 94a:	22 83       	std	Z+2, r18	; 0x02
 94c:	89 81       	ldd	r24, Y+1	; 0x01
 94e:	9a 81       	ldd	r25, Y+2	; 0x02
 950:	fc 01       	movw	r30, r24
 952:	92 81       	ldd	r25, Z+2	; 0x02
 954:	8d 81       	ldd	r24, Y+5	; 0x05
 956:	29 2f       	mov	r18, r25
 958:	28 0f       	add	r18, r24
 95a:	89 81       	ldd	r24, Y+1	; 0x01
 95c:	9a 81       	ldd	r25, Y+2	; 0x02
 95e:	fc 01       	movw	r30, r24
 960:	22 83       	std	Z+2, r18	; 0x02
 962:	89 81       	ldd	r24, Y+1	; 0x01
 964:	9a 81       	ldd	r25, Y+2	; 0x02
 966:	fc 01       	movw	r30, r24
 968:	92 81       	ldd	r25, Z+2	; 0x02
 96a:	81 e0       	ldi	r24, 0x01	; 1
 96c:	9c 33       	cpi	r25, 0x3C	; 60
 96e:	08 f4       	brcc	.+2      	; 0x972 <_ZNV4date8add_dateES_+0xb0>
 970:	80 e0       	ldi	r24, 0x00	; 0
 972:	88 23       	and	r24, r24
 974:	09 f4       	brne	.+2      	; 0x978 <_ZNV4date8add_dateES_+0xb6>
 976:	69 c0       	rjmp	.+210    	; 0xa4a <_ZNV4date8add_dateES_+0x188>
 978:	89 81       	ldd	r24, Y+1	; 0x01
 97a:	9a 81       	ldd	r25, Y+2	; 0x02
 97c:	fc 01       	movw	r30, r24
 97e:	82 81       	ldd	r24, Z+2	; 0x02
 980:	9c e3       	ldi	r25, 0x3C	; 60
 982:	69 2f       	mov	r22, r25
 984:	96 d0       	rcall	.+300    	; 0xab2 <__udivmodqi4>
 986:	89 2f       	mov	r24, r25
 988:	28 2f       	mov	r18, r24
 98a:	89 81       	ldd	r24, Y+1	; 0x01
 98c:	9a 81       	ldd	r25, Y+2	; 0x02
 98e:	fc 01       	movw	r30, r24
 990:	22 83       	std	Z+2, r18	; 0x02
 992:	89 81       	ldd	r24, Y+1	; 0x01
 994:	9a 81       	ldd	r25, Y+2	; 0x02
 996:	fc 01       	movw	r30, r24
 998:	82 81       	ldd	r24, Z+2	; 0x02
 99a:	21 e0       	ldi	r18, 0x01	; 1
 99c:	28 0f       	add	r18, r24
 99e:	89 81       	ldd	r24, Y+1	; 0x01
 9a0:	9a 81       	ldd	r25, Y+2	; 0x02
 9a2:	fc 01       	movw	r30, r24
 9a4:	22 83       	std	Z+2, r18	; 0x02
 9a6:	89 81       	ldd	r24, Y+1	; 0x01
 9a8:	9a 81       	ldd	r25, Y+2	; 0x02
 9aa:	fc 01       	movw	r30, r24
 9ac:	93 81       	ldd	r25, Z+3	; 0x03
 9ae:	8e 81       	ldd	r24, Y+6	; 0x06
 9b0:	29 2f       	mov	r18, r25
 9b2:	28 0f       	add	r18, r24
 9b4:	89 81       	ldd	r24, Y+1	; 0x01
 9b6:	9a 81       	ldd	r25, Y+2	; 0x02
 9b8:	fc 01       	movw	r30, r24
 9ba:	23 83       	std	Z+3, r18	; 0x03
 9bc:	89 81       	ldd	r24, Y+1	; 0x01
 9be:	9a 81       	ldd	r25, Y+2	; 0x02
 9c0:	fc 01       	movw	r30, r24
 9c2:	93 81       	ldd	r25, Z+3	; 0x03
 9c4:	81 e0       	ldi	r24, 0x01	; 1
 9c6:	9c 33       	cpi	r25, 0x3C	; 60
 9c8:	08 f4       	brcc	.+2      	; 0x9cc <_ZNV4date8add_dateES_+0x10a>
 9ca:	80 e0       	ldi	r24, 0x00	; 0
 9cc:	88 23       	and	r24, r24
 9ce:	09 f4       	brne	.+2      	; 0x9d2 <_ZNV4date8add_dateES_+0x110>
 9d0:	3e c0       	rjmp	.+124    	; 0xa4e <_ZNV4date8add_dateES_+0x18c>
 9d2:	89 81       	ldd	r24, Y+1	; 0x01
 9d4:	9a 81       	ldd	r25, Y+2	; 0x02
 9d6:	fc 01       	movw	r30, r24
 9d8:	83 81       	ldd	r24, Z+3	; 0x03
 9da:	9c e3       	ldi	r25, 0x3C	; 60
 9dc:	69 2f       	mov	r22, r25
 9de:	69 d0       	rcall	.+210    	; 0xab2 <__udivmodqi4>
 9e0:	89 2f       	mov	r24, r25
 9e2:	28 2f       	mov	r18, r24
 9e4:	89 81       	ldd	r24, Y+1	; 0x01
 9e6:	9a 81       	ldd	r25, Y+2	; 0x02
 9e8:	fc 01       	movw	r30, r24
 9ea:	23 83       	std	Z+3, r18	; 0x03
 9ec:	89 81       	ldd	r24, Y+1	; 0x01
 9ee:	9a 81       	ldd	r25, Y+2	; 0x02
 9f0:	fc 01       	movw	r30, r24
 9f2:	83 81       	ldd	r24, Z+3	; 0x03
 9f4:	21 e0       	ldi	r18, 0x01	; 1
 9f6:	28 0f       	add	r18, r24
 9f8:	89 81       	ldd	r24, Y+1	; 0x01
 9fa:	9a 81       	ldd	r25, Y+2	; 0x02
 9fc:	fc 01       	movw	r30, r24
 9fe:	23 83       	std	Z+3, r18	; 0x03
 a00:	89 81       	ldd	r24, Y+1	; 0x01
 a02:	9a 81       	ldd	r25, Y+2	; 0x02
 a04:	fc 01       	movw	r30, r24
 a06:	94 81       	ldd	r25, Z+4	; 0x04
 a08:	8f 81       	ldd	r24, Y+7	; 0x07
 a0a:	29 2f       	mov	r18, r25
 a0c:	28 0f       	add	r18, r24
 a0e:	89 81       	ldd	r24, Y+1	; 0x01
 a10:	9a 81       	ldd	r25, Y+2	; 0x02
 a12:	fc 01       	movw	r30, r24
 a14:	24 83       	std	Z+4, r18	; 0x04
 a16:	89 81       	ldd	r24, Y+1	; 0x01
 a18:	9a 81       	ldd	r25, Y+2	; 0x02
 a1a:	fc 01       	movw	r30, r24
 a1c:	94 81       	ldd	r25, Z+4	; 0x04
 a1e:	81 e0       	ldi	r24, 0x01	; 1
 a20:	98 31       	cpi	r25, 0x18	; 24
 a22:	08 f4       	brcc	.+2      	; 0xa26 <_ZNV4date8add_dateES_+0x164>
 a24:	80 e0       	ldi	r24, 0x00	; 0
 a26:	88 23       	and	r24, r24
 a28:	99 f0       	breq	.+38     	; 0xa50 <_ZNV4date8add_dateES_+0x18e>
 a2a:	89 81       	ldd	r24, Y+1	; 0x01
 a2c:	9a 81       	ldd	r25, Y+2	; 0x02
 a2e:	fc 01       	movw	r30, r24
 a30:	84 81       	ldd	r24, Z+4	; 0x04
 a32:	98 e1       	ldi	r25, 0x18	; 24
 a34:	69 2f       	mov	r22, r25
 a36:	3d d0       	rcall	.+122    	; 0xab2 <__udivmodqi4>
 a38:	89 2f       	mov	r24, r25
 a3a:	28 2f       	mov	r18, r24
 a3c:	89 81       	ldd	r24, Y+1	; 0x01
 a3e:	9a 81       	ldd	r25, Y+2	; 0x02
 a40:	fc 01       	movw	r30, r24
 a42:	24 83       	std	Z+4, r18	; 0x04
 a44:	05 c0       	rjmp	.+10     	; 0xa50 <_ZNV4date8add_dateES_+0x18e>
 a46:	00 00       	nop
 a48:	03 c0       	rjmp	.+6      	; 0xa50 <_ZNV4date8add_dateES_+0x18e>
 a4a:	00 00       	nop
 a4c:	01 c0       	rjmp	.+2      	; 0xa50 <_ZNV4date8add_dateES_+0x18e>
 a4e:	00 00       	nop
 a50:	27 96       	adiw	r28, 0x07	; 7
 a52:	0f b6       	in	r0, 0x3f	; 63
 a54:	f8 94       	cli
 a56:	de bf       	out	0x3e, r29	; 62
 a58:	0f be       	out	0x3f, r0	; 63
 a5a:	cd bf       	out	0x3d, r28	; 61
 a5c:	df 91       	pop	r29
 a5e:	cf 91       	pop	r28
 a60:	08 95       	ret

00000a62 <_ZNV4date6inc_msEv>:

void date::inc_ms() volatile
{
 a62:	0f 93       	push	r16
 a64:	cf 93       	push	r28
 a66:	df 93       	push	r29
 a68:	cd b7       	in	r28, 0x3d	; 61
 a6a:	de b7       	in	r29, 0x3e	; 62
 a6c:	27 97       	sbiw	r28, 0x07	; 7
 a6e:	0f b6       	in	r0, 0x3f	; 63
 a70:	f8 94       	cli
 a72:	de bf       	out	0x3e, r29	; 62
 a74:	0f be       	out	0x3f, r0	; 63
 a76:	cd bf       	out	0x3d, r28	; 61
 a78:	9f 83       	std	Y+7, r25	; 0x07
 a7a:	8e 83       	std	Y+6, r24	; 0x06
	add_date(date(1,0,0,0));
 a7c:	00 e0       	ldi	r16, 0x00	; 0
 a7e:	20 e0       	ldi	r18, 0x00	; 0
 a80:	40 e0       	ldi	r20, 0x00	; 0
 a82:	61 e0       	ldi	r22, 0x01	; 1
 a84:	70 e0       	ldi	r23, 0x00	; 0
 a86:	ce 01       	movw	r24, r28
 a88:	01 96       	adiw	r24, 0x01	; 1
 a8a:	e8 de       	rcall	.-560    	; 0x85c <_ZN4dateC1Ejhhh>
 a8c:	8e 81       	ldd	r24, Y+6	; 0x06
 a8e:	9f 81       	ldd	r25, Y+7	; 0x07
 a90:	29 81       	ldd	r18, Y+1	; 0x01
 a92:	3a 81       	ldd	r19, Y+2	; 0x02
 a94:	4b 81       	ldd	r20, Y+3	; 0x03
 a96:	5c 81       	ldd	r21, Y+4	; 0x04
 a98:	6d 81       	ldd	r22, Y+5	; 0x05
 a9a:	13 df       	rcall	.-474    	; 0x8c2 <_ZNV4date8add_dateES_>
}
 a9c:	00 00       	nop
 a9e:	27 96       	adiw	r28, 0x07	; 7
 aa0:	0f b6       	in	r0, 0x3f	; 63
 aa2:	f8 94       	cli
 aa4:	de bf       	out	0x3e, r29	; 62
 aa6:	0f be       	out	0x3f, r0	; 63
 aa8:	cd bf       	out	0x3d, r28	; 61
 aaa:	df 91       	pop	r29
 aac:	cf 91       	pop	r28
 aae:	0f 91       	pop	r16
 ab0:	08 95       	ret

00000ab2 <__udivmodqi4>:
 ab2:	99 1b       	sub	r25, r25
 ab4:	79 e0       	ldi	r23, 0x09	; 9
 ab6:	04 c0       	rjmp	.+8      	; 0xac0 <__udivmodqi4_ep>

00000ab8 <__udivmodqi4_loop>:
 ab8:	99 1f       	adc	r25, r25
 aba:	96 17       	cp	r25, r22
 abc:	08 f0       	brcs	.+2      	; 0xac0 <__udivmodqi4_ep>
 abe:	96 1b       	sub	r25, r22

00000ac0 <__udivmodqi4_ep>:
 ac0:	88 1f       	adc	r24, r24
 ac2:	7a 95       	dec	r23
 ac4:	c9 f7       	brne	.-14     	; 0xab8 <__udivmodqi4_loop>
 ac6:	80 95       	com	r24
 ac8:	08 95       	ret

00000aca <__udivmodhi4>:
 aca:	aa 1b       	sub	r26, r26
 acc:	bb 1b       	sub	r27, r27
 ace:	51 e1       	ldi	r21, 0x11	; 17
 ad0:	07 c0       	rjmp	.+14     	; 0xae0 <__udivmodhi4_ep>

00000ad2 <__udivmodhi4_loop>:
 ad2:	aa 1f       	adc	r26, r26
 ad4:	bb 1f       	adc	r27, r27
 ad6:	a6 17       	cp	r26, r22
 ad8:	b7 07       	cpc	r27, r23
 ada:	10 f0       	brcs	.+4      	; 0xae0 <__udivmodhi4_ep>
 adc:	a6 1b       	sub	r26, r22
 ade:	b7 0b       	sbc	r27, r23

00000ae0 <__udivmodhi4_ep>:
 ae0:	88 1f       	adc	r24, r24
 ae2:	99 1f       	adc	r25, r25
 ae4:	5a 95       	dec	r21
 ae6:	a9 f7       	brne	.-22     	; 0xad2 <__udivmodhi4_loop>
 ae8:	80 95       	com	r24
 aea:	90 95       	com	r25
 aec:	bc 01       	movw	r22, r24
 aee:	cd 01       	movw	r24, r26
 af0:	08 95       	ret

00000af2 <__divmodsi4>:
 af2:	05 2e       	mov	r0, r21
 af4:	97 fb       	bst	r25, 7
 af6:	16 f4       	brtc	.+4      	; 0xafc <__divmodsi4+0xa>
 af8:	00 94       	com	r0
 afa:	0f d0       	rcall	.+30     	; 0xb1a <__negsi2>
 afc:	57 fd       	sbrc	r21, 7
 afe:	05 d0       	rcall	.+10     	; 0xb0a <__divmodsi4_neg2>
 b00:	14 d0       	rcall	.+40     	; 0xb2a <__udivmodsi4>
 b02:	07 fc       	sbrc	r0, 7
 b04:	02 d0       	rcall	.+4      	; 0xb0a <__divmodsi4_neg2>
 b06:	46 f4       	brtc	.+16     	; 0xb18 <__divmodsi4_exit>
 b08:	08 c0       	rjmp	.+16     	; 0xb1a <__negsi2>

00000b0a <__divmodsi4_neg2>:
 b0a:	50 95       	com	r21
 b0c:	40 95       	com	r20
 b0e:	30 95       	com	r19
 b10:	21 95       	neg	r18
 b12:	3f 4f       	sbci	r19, 0xFF	; 255
 b14:	4f 4f       	sbci	r20, 0xFF	; 255
 b16:	5f 4f       	sbci	r21, 0xFF	; 255

00000b18 <__divmodsi4_exit>:
 b18:	08 95       	ret

00000b1a <__negsi2>:
 b1a:	90 95       	com	r25
 b1c:	80 95       	com	r24
 b1e:	70 95       	com	r23
 b20:	61 95       	neg	r22
 b22:	7f 4f       	sbci	r23, 0xFF	; 255
 b24:	8f 4f       	sbci	r24, 0xFF	; 255
 b26:	9f 4f       	sbci	r25, 0xFF	; 255
 b28:	08 95       	ret

00000b2a <__udivmodsi4>:
 b2a:	a1 e2       	ldi	r26, 0x21	; 33
 b2c:	1a 2e       	mov	r1, r26
 b2e:	aa 1b       	sub	r26, r26
 b30:	bb 1b       	sub	r27, r27
 b32:	fd 01       	movw	r30, r26
 b34:	0d c0       	rjmp	.+26     	; 0xb50 <__udivmodsi4_ep>

00000b36 <__udivmodsi4_loop>:
 b36:	aa 1f       	adc	r26, r26
 b38:	bb 1f       	adc	r27, r27
 b3a:	ee 1f       	adc	r30, r30
 b3c:	ff 1f       	adc	r31, r31
 b3e:	a2 17       	cp	r26, r18
 b40:	b3 07       	cpc	r27, r19
 b42:	e4 07       	cpc	r30, r20
 b44:	f5 07       	cpc	r31, r21
 b46:	20 f0       	brcs	.+8      	; 0xb50 <__udivmodsi4_ep>
 b48:	a2 1b       	sub	r26, r18
 b4a:	b3 0b       	sbc	r27, r19
 b4c:	e4 0b       	sbc	r30, r20
 b4e:	f5 0b       	sbc	r31, r21

00000b50 <__udivmodsi4_ep>:
 b50:	66 1f       	adc	r22, r22
 b52:	77 1f       	adc	r23, r23
 b54:	88 1f       	adc	r24, r24
 b56:	99 1f       	adc	r25, r25
 b58:	1a 94       	dec	r1
 b5a:	69 f7       	brne	.-38     	; 0xb36 <__udivmodsi4_loop>
 b5c:	60 95       	com	r22
 b5e:	70 95       	com	r23
 b60:	80 95       	com	r24
 b62:	90 95       	com	r25
 b64:	9b 01       	movw	r18, r22
 b66:	ac 01       	movw	r20, r24
 b68:	bd 01       	movw	r22, r26
 b6a:	cf 01       	movw	r24, r30
 b6c:	08 95       	ret

00000b6e <__tablejump2__>:
 b6e:	ee 0f       	add	r30, r30
 b70:	ff 1f       	adc	r31, r31
 b72:	05 90       	lpm	r0, Z+
 b74:	f4 91       	lpm	r31, Z
 b76:	e0 2d       	mov	r30, r0
 b78:	09 94       	ijmp

00000b7a <_exit>:
 b7a:	f8 94       	cli

00000b7c <__stop_program>:
 b7c:	ff cf       	rjmp	.-2      	; 0xb7c <__stop_program>
